name: üöÄ Deploy - Assistente Sustenta√ß√£o (Cloud Run via Docker Hub)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag da imagem (ex: latest ou v1.0.0)"
        required: true
        default: "latest"
        type: string

env:
  REGION: us-central1
  SERVICE_NAME: "assistente-logs-chat"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # ==============================================================
      # üì¶ Checkout do c√≥digo
      # ==============================================================
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4

      # ==============================================================
      # üîê Login no Docker Hub
      # ==============================================================
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ==============================================================
      # üê≥ Build e Push da imagem Docker
      # ==============================================================
      - name: Build e Push da imagem Docker
        run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.event.inputs.tag }}"
          echo "üì¶ Construindo imagem: $IMAGE_TAG"
          
          # Build da imagem
          docker build -t $IMAGE_TAG .
          
          # Push para Docker Hub
          echo "üöÄ Enviando imagem para Docker Hub..."
          docker push $IMAGE_TAG
          
          echo "‚úÖ Imagem enviada com sucesso para Docker Hub: $IMAGE_TAG"

      # ==============================================================
      # üîê Autentica√ß√£o com o Google Cloud
      # ==============================================================
      - name: Autenticar no Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # ==============================================================
      # ‚òÅÔ∏è Configurar gcloud CLI
      # ==============================================================
      - name: Configurar gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # ==============================================================
      # üöÄ Deploy no Cloud Run usando a imagem do Docker Hub
      # ==============================================================
      - name: Deploy no Cloud Run
        run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.event.inputs.tag }}"

          echo "üöÄ Iniciando deploy no Cloud Run..."
          echo "üìù Servi√ßo: ${{ env.SERVICE_NAME }}"
          echo "üìç Regi√£o: ${{ env.REGION }}"
          echo "üê≥ Imagem: $IMAGE_TAG"

          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image $IMAGE_TAG \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --platform managed \
            --port 8080 \
            --min-instances=0 \
            --max-instances=1 \
            --cpu=1 \
            --memory=512Mi \
            --set-env-vars "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
            --labels="github-repo=${{ github.repository }},environment=production,managed-by=github-actions"

          echo "‚úÖ Deploy conclu√≠do com sucesso."

      # ==============================================================
      # üåê Exibir URL p√∫blica do servi√ßo
      # ==============================================================
      - name: Mostrar URL do Cloud Run
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format='value(status.url)')
          echo "üåç Servi√ßo dispon√≠vel em: $URL"
          echo "::set-output name=service_url::$URL"

      # ==============================================================
      # üì§ Enviar logs (deploy) para Fluent Bit + Discord
      # ==============================================================
      - name: Enviar logs (deploy) para Fluent Bit e Discord
        if: always()
        env:
          FLUENT_BIT_URL: ${{ secrets.FLUENT_BIT_URL }}
          FLUENT_BIT_AUTH_BA: ${{ secrets.FLUENT_BIT_AUTH_BA }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          REPO="${{ github.repository }}"
          WORKFLOW="${{ github.workflow }}"
          JOB="${{ github.job }}"
          BRANCH="${{ github.ref_name }}"
          SHA="${{ github.sha }}"
          RUN_ID="${{ github.run_id }}"
          STATUS="${{ job.status }}"
          TS="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          TIPO_ERRO=$([ "$STATUS" = "failure" ] && echo "DEPLOY" || echo "INFO")
          BASE="${REPO}|${WORKFLOW}|${JOB}|${STATUS}|${SHA:0:8}"
          STACK_HASH=$(printf "%s" "$BASE" | shasum -a 256 | awk '{print $1}')

          echo "üì° Enviando logs de deploy para Fluent Bit..."

          # Obter URL do servi√ßo se o deploy foi bem-sucedido
          SERVICE_URL=""
          if [ "$STATUS" = "success" ]; then
            SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
              --region ${{ env.REGION }} \
              --format='value(status.url)' 2>/dev/null || echo "")
          fi

          # Enviar logs para Fluent Bit
          curl --fail --silent --location "$FLUENT_BIT_URL" \
            --header 'Content-Type: application/json' \
            --header "Authorization: Basic $FLUENT_BIT_AUTH_BA" \
            --data "{
              \"service\": \"github-actions\",
              \"repo\": \"${REPO}\",
              \"workflow\": \"${WORKFLOW}\",
              \"job\": \"${JOB}\",
              \"status\": \"${STATUS}\",
              \"branch\": \"${BRANCH}\",
              \"autor\": \"${{ github.actor }}\",
              \"git_sha\": \"${SHA}\",
              \"run_id\": \"${RUN_ID}\",
              \"mensagem_curta\": \"Execu√ß√£o ${STATUS} em ${WORKFLOW}/${JOB}\",
              \"tipo_erro\": \"${TIPO_ERRO}\",
              \"stack_hash\": \"${STACK_HASH}\",
              \"service_url\": \"${SERVICE_URL}\",
              \"image_tag\": \"${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.event.inputs.tag }}\",
              \"timestamp\": \"${TS}\"
            }" && echo "‚úÖ Logs enviados com sucesso para Fluent Bit." || echo "‚ùå Falha ao enviar logs para Fluent Bit."

          echo "üîî Enviando notifica√ß√£o para Discord..."
          EMBED_COLOR=$([ "$STATUS" = "success" ] && echo "5763719" || echo "15548997")
          COMMIT_URL="https://github.com/${REPO}/actions/runs/${RUN_ID}"
          GIT_SHORT_SHA="${SHA:0:8}"

          # Construir mensagem para Discord
          DISCORD_TITLE=$([ "$STATUS" = "success" ] && echo "‚úÖ Deploy Conclu√≠do - Assistente Sustenta√ß√£o" || echo "‚ùå Falha no Deploy - Assistente Sustenta√ß√£o")
          
          DISCORD_DATA="{
            \"embeds\": [{
              \"title\": \"${DISCORD_TITLE}\",
              \"color\": ${EMBED_COLOR},
              \"fields\": [
                {\"name\": \"üß© Projeto\", \"value\": \"${REPO}\", \"inline\": true},
                {\"name\": \"üß± Pipeline\", \"value\": \"${WORKFLOW}\", \"inline\": true},
                {\"name\": \"üíª Commit\", \"value\": \"${GIT_SHORT_SHA}\", \"inline\": true},
                {\"name\": \"üîß Status\", \"value\": \"${STATUS}\", \"inline\": true},
                {\"name\": \"üåø Branch\", \"value\": \"${BRANCH}\", \"inline\": true},
                {\"name\": \"üë§ Iniciado por\", \"value\": \"${{ github.actor }}\", \"inline\": true},
                {\"name\": \"üê≥ Imagem\", \"value\": \"${{ github.event.inputs.tag }}\", \"inline\": true}"

          # Adicionar URL do servi√ßo se dispon√≠vel
          if [ -n "$SERVICE_URL" ]; then
            DISCORD_DATA="${DISCORD_DATA},
                {\"name\": \"üåê URL do Servi√ßo\", \"value\": \"[Acessar](${SERVICE_URL})\", \"inline\": false}"
          fi

          DISCORD_DATA="${DISCORD_DATA}
              ],
              \"footer\": {
                \"text\": \"GitHub Actions - Assistente Sustenta√ß√£o ‚Ä¢ ${TS}\"
              }
            }]
          }"

          curl --fail --silent -H "Content-Type: application/json" -X POST "$DISCORD_WEBHOOK_URL" \
            --data "$DISCORD_DATA" && echo "‚úÖ Notifica√ß√£o enviada para Discord com sucesso." || echo "‚ùå Falha ao enviar notifica√ß√£o para Discord."

  # ==============================================================
  # üîç Health Check (Opcional)
  # ==============================================================
  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
      - name: Configurar gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Health Check do servi√ßo
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format='value(status.url)')
          
          echo "üîç Realizando health check em: $SERVICE_URL"
          
          # Tentativa de health check com retry
          for i in {1..5}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL" || echo "000")
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "‚úÖ Health check passou! Servi√ßo respondendo com HTTP 200"
              break
            else
              echo "‚è≥ Tentativa $i: Servi√ßo retornou HTTP $HTTP_STATUS, aguardando..."
              sleep 10
            fi
          done
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ö†Ô∏è  Aviso: Servi√ßo pode n√£o estar respondendo corretamente (HTTP: $HTTP_STATUS)"
          fi
